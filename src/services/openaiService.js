import { AI_SETTINGS, updateAIUsage } from '../config/aiSettings';

const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

export const analyzeFoodWithOpenAI = async (foodDescription) => {
  try {
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: AI_SETTINGS.OPENAI_MODEL,
        messages: [
          {
            role: 'system',
            content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
2. –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
3. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
4. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π }

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ):
{
  "calories": —á–∏—Å–ª–æ,
  "protein": —á–∏—Å–ª–æ,
  "fat": —á–∏—Å–ª–æ,
  "carbs": —á–∏—Å–ª–æ,
  "recommendations": "—Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
}

–ü–†–ò–ú–ï–†–´:
–í–≤–æ–¥: "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 200–≥"
–û—Ç–≤–µ—Ç: {"calories": 330, "protein": 62, "fat": 7.2, "carbs": 0, "recommendations": "–û—Ç–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞! –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –æ–≤–æ—â–∏ –¥–ª—è –∫–ª–µ—Ç—á–∞—Ç–∫–∏."}

–í–≤–æ–¥: "—è–±–ª–æ–∫–æ —Å—Ä–µ–¥–Ω–µ–µ"
–û—Ç–≤–µ—Ç: {"calories": 95, "protein": 0.5, "fat": 0.3, "carbs": 25, "recommendations": "–•–æ—Ä–æ—à–∏–π –ø–µ—Ä–µ–∫—É—Å! –°–æ–¥–µ—Ä–∂–∏—Ç –ø–µ–∫—Ç–∏–Ω –∏ –≤–∏—Ç–∞–º–∏–Ω—ã."}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –Ω–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
"–î–∞–Ω–Ω–∞—è –µ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –±–µ–ª–∫–∞. –í–æ—Ç –∞–Ω–∞–ª–∏–∑: {"calories": 300}"

–ü–†–ê–í–ò–õ–¨–ù–û:
{"calories": 300, "protein": 50, "fat": 10, "carbs": 20, "recommendations": "–•–æ—Ä–æ—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞!"}`
          },
          {
            role: 'user',
            content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –µ–¥—É: ${foodDescription}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!`
          }
        ],
        temperature: AI_SETTINGS.TEMPERATURE,
        max_tokens: AI_SETTINGS.MAX_TOKENS
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    console.log('üîç –û—Ç–≤–µ—Ç –æ—Ç GPT:', content);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const estimatedCost = 0.02; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    updateAIUsage(data.usage?.total_tokens || 500, estimatedCost);
    
    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    try {
      const nutritionData = JSON.parse(content);
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', nutritionData);
      return nutritionData;
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      console.error('‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const cleanedContent = content.trim();
      if (cleanedContent.startsWith('{') && cleanedContent.endsWith('}')) {
        try {
          const nutritionData = JSON.parse(cleanedContent);
          console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', nutritionData);
          return nutritionData;
        } catch (secondError) {
          throw new Error(`GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${content}`);
        }
      } else {
        throw new Error(`GPT –≤–µ—Ä–Ω—É–ª –Ω–µ JSON —Ñ–æ—Ä–º–∞—Ç: ${content}`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ OpenAI API:', error);
    throw error;
  }
}; 