import { analyzeFoodWithOpenAI } from './openaiService';
import { AI_SETTINGS } from '../config/aiSettings';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
export const analyzeMultipleFoods = async (foodDescription) => {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', foodDescription);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = splitFoodDescription(foodDescription);
    console.log('üìù –†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã:', products);
    
    if (products.length === 1) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      console.log('‚úÖ –û–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑');
      return await analyzeFoodWithOpenAI(foodDescription);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    console.log('üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ...');
    const productAnalyses = [];
    
    for (let i = 0; i < products.length; i++) {
      const product = products[i].trim();
      if (product) {
        try {
          console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç ${i + 1}: ${product}`);
          const analysis = await analyzeFoodWithOpenAI(product);
          
          // –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç GPT
          const improvedName = await getImprovedProductName(product, analysis);
          
          productAnalyses.push({
            originalProduct: product, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product: improvedName,    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç GPT
            analysis: analysis
          });
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ "${product}":`, error);
          // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
          productAnalyses.push({
            originalProduct: product,
            product: formatProductName(product), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            analysis: {
              calories: 100,
              protein: 5,
              fat: 3,
              carbs: 15,
              recommendations: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç'
            },
            error: true
          });
        }
      }
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const totalAnalysis = calculateTotalNutrition(productAnalyses);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      products: productAnalyses,
      total: totalAnalysis,
      recommendations: generateOverallRecommendations(totalAnalysis, productAnalyses.length)
    };
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
const splitFoodDescription = (description) => {
  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º, —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π, "–∏", "—Å", "–ø–ª—é—Å"
  const separators = /[,;]|\s+–∏\s+|\s+—Å\s+|\s+–ø–ª—é—Å\s+/i;
  
  if (!separators.test(description)) {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
    return [description];
  }
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
  let products = description.split(separators);
  
  // –û—á–∏—â–∞–µ–º –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
  products = products
    .map(product => product.trim())
    .filter(product => product.length > 0);
  
  // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –±—ã–ª —á–∞—Å—Ç—å—é –Ω–∞–∑–≤–∞–Ω–∏—è
  if (products.length === 1) {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ "–∏" –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
    const andSplit = description.split(/\s+–∏\s+/i);
    if (andSplit.length > 1) {
      products = andSplit
        .map(product => product.trim())
        .filter(product => product.length > 0);
    }
  }
  
  return products;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–µ–π –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
const calculateTotalNutrition = (productAnalyses) => {
  let totalCalories = 0;
  let totalProtein = 0;
  let totalFat = 0;
  let totalCarbs = 0;
  
  productAnalyses.forEach(({ analysis }) => {
    totalCalories += analysis.calories || 0;
    totalProtein += analysis.protein || 0;
    totalFat += analysis.fat || 0;
    totalCarbs += analysis.carbs || 0;
  });
  
  return {
    calories: Math.round(totalCalories),
    protein: Math.round(totalProtein * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    fat: Math.round(totalFat * 10) / 10,
    carbs: Math.round(totalCarbs * 10) / 10
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
const generateOverallRecommendations = (totalNutrition, productCount) => {
  let recommendations = '';
  
  if (productCount === 1) {
    recommendations = '–û–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.';
  } else {
    recommendations = `${productCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ. `;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â—É—é –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
  if (totalNutrition.calories < 200) {
    recommendations += '–≠—Ç–æ –ª–µ–≥–∫–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –¥–ª—è –Ω–∞—Å—ã—â–µ–Ω–∏—è.';
  } else if (totalNutrition.calories > 600) {
    recommendations += '–≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ –≤ –æ–±—â–µ–º –¥–Ω–µ–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ.';
  } else {
    recommendations += '–•–æ—Ä–æ—à–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!';
  }
  
  if (totalNutrition.protein < 15) {
    recommendations += ' –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.';
  }
  
  return recommendations;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç GPT
const getImprovedProductName = async (originalName, nutritionData) => {
  try {
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û–ü–ò–°–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${originalName}"

–ü–†–ê–í–ò–õ–ê:
1. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π
2. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
3. –£–∫–∞–∂–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –≤–∞–∂–µ–Ω
4. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º

–ü–†–ò–ú–ï–†–´:
"–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 200–≥" ‚Üí "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ (200–≥)"
"—è–±–ª–æ–∫–æ —Å—Ä–µ–¥–Ω–µ–µ" ‚Üí "–Ø–±–ª–æ–∫–æ —Å—Ä–µ–¥–Ω–µ–µ"
"—Ä–∏—Å –±–µ–ª—ã–π –≤–∞—Ä–µ–Ω—ã–π" ‚Üí "–†–∏—Å –±–µ–ª—ã–π –≤–∞—Ä–µ–Ω—ã–π"
"—Å–∞–ª–∞—Ç –æ–≤–æ—â–Ω–æ–π —Å –ø–æ–º–∏–¥–æ—Ä–∞–º–∏" ‚Üí "–°–∞–ª–∞—Ç –æ–≤–æ—â–Ω–æ–π —Å –ø–æ–º–∏–¥–æ—Ä–∞–º–∏"
"–∫–∞–∫–∞—è-—Ç–æ –µ–¥–∞" ‚Üí "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: AI_SETTINGS.OPENAI_MODEL,
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        max_tokens: 50    // –ú–∏–Ω–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const improvedName = data.choices[0].message.content.trim();
    
    console.log(`üîÑ –£–ª—É—á—à–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${originalName}" ‚Üí "${improvedName}"`);
    return improvedName;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return formatProductName(originalName);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
export const formatProductName = (product) => {
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Ç–∞–µ–º–æ–º—É –≤–∏–¥—É
  return product
    .trim()
    .replace(/\s+/g, ' ')
    .replace(/^\w/, c => c.toUpperCase()); // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
}; 